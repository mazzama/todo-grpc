// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/mazzama/todo-grpc/internal/todo/entity"
	mock "github.com/stretchr/testify/mock"
)

// ItemRepository is an autogenerated mock type for the ItemRepository type
type ItemRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, item
func (_m *ItemRepository) Create(ctx context.Context, item *entity.Item) error {
	ret := _m.Called(ctx, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Item) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, itemID
func (_m *ItemRepository) Delete(ctx context.Context, itemID uint64) error {
	ret := _m.Called(ctx, itemID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, itemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindManyByCriteria provides a mock function with given fields: ctx, criteria, orderBy
func (_m *ItemRepository) FindManyByCriteria(ctx context.Context, criteria map[string]interface{}, orderBy ...string) ([]*entity.Item, error) {
	_va := make([]interface{}, len(orderBy))
	for _i := range orderBy {
		_va[_i] = orderBy[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, criteria)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*entity.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, ...string) ([]*entity.Item, error)); ok {
		return rf(ctx, criteria, orderBy...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, ...string) []*entity.Item); ok {
		r0 = rf(ctx, criteria, orderBy...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}, ...string) error); ok {
		r1 = rf(ctx, criteria, orderBy...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneByCriteria provides a mock function with given fields: ctx, criteria
func (_m *ItemRepository) FindOneByCriteria(ctx context.Context, criteria map[string]interface{}) (*entity.Item, error) {
	ret := _m.Called(ctx, criteria)

	var r0 *entity.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) (*entity.Item, error)); ok {
		return rf(ctx, criteria)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) *entity.Item); ok {
		r0 = rf(ctx, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}) error); ok {
		r1 = rf(ctx, criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, item
func (_m *ItemRepository) Update(ctx context.Context, item *entity.Item) (*entity.Item, error) {
	ret := _m.Called(ctx, item)

	var r0 *entity.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Item) (*entity.Item, error)); ok {
		return rf(ctx, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Item) *entity.Item); ok {
		r0 = rf(ctx, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Item) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewItemRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewItemRepository creates a new instance of ItemRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewItemRepository(t mockConstructorTestingTNewItemRepository) *ItemRepository {
	mock := &ItemRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
